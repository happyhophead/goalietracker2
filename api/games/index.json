const { CosmosClient } = require("@azure/cosmos");

const endpoint = process.env.COSMOS_ENDPOINT || "";
const key = process.env.COSMOS_KEY || "";
const connectionString = process.env.COSMOS_CONNECTION_STRING || "";

let client;
if (connectionString) {
    client = new CosmosClient(connectionString);
} else if (endpoint && key) {
    client = new CosmosClient({ endpoint, key });
}

const database = client?.database("GoalieStatsDB");
const container = database?.container("Games");

module.exports = async function (context, req) {
    context.log('Goalie Stats API triggered');

    // Set CORS headers
    context.res = {
        headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
    };

    // Handle OPTIONS request for CORS
    if (req.method === 'OPTIONS') {
        context.res.status = 200;
        return;
    }

    try {
        if (req.method === 'GET') {
            // Get all games
            const { resources: games } = await container.items
                .query("SELECT * FROM c ORDER BY c._ts DESC")
                .fetchAll();

            context.res.status = 200;
            context.res.body = { games };

        } else if (req.method === 'POST') {
            // Add new game
            const gameData = req.body;
            
            // Add unique ID and timestamp
            const newGame = {
                id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                ...gameData,
                createdAt: new Date().toISOString()
            };

            const { resource: createdGame } = await container.items.create(newGame);

            context.res.status = 201;
            context.res.body = createdGame;

        } else {
            context.res.status = 405;
            context.res.body = { error: 'Method not allowed' };
        }

    } catch (error) {
        context.log.error('Error:', error);
        context.res.status = 500;
        context.res.body = { 
            error: 'Internal server error', 
            message: error.message 
        };
    }
};